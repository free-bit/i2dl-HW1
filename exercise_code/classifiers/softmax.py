"""Linear Softmax Classifier."""
# pylint: disable=invalid-name
import numpy as np

from .linear_classifier import LinearClassifier

def naive_matrix_mult(x, y):
    I, K, J = *x.shape, y.shape[1]
    result = np.zeros((I, J))
    for i in range(I):
        for j in range(J):
            for k in range(K):
                result[i][j] += x[i][k] * y[k][j]
    return result

def naive_matrix_sum(x, y):
    n_row, n_col = x.shape
    for i in range(n_row):
        for j in range(n_col):
            x[i][j] += y[i][j]

def naive_matrix_scale(x, scalar):
    n_row, n_col = x.shape
    for i in range(n_row):
        for j in range(n_col):
            x[i][j] *= scalar

def cross_entropy_loss_naive(W, X, y, reg):
    """
    Cross-entropy loss function, naive implementation (with loops)

    Inputs have dimension D, there are C classes, and we operate on minibatches
    of N examples.

    Inputs:
    - W: A numpy array of shape (D, C) containing weights.
    - X: A numpy array of shape (N, D) containing a minibatch of data.
    - y: A numpy array of shape (N,) containing training labels; y[i] = c means
      that X[i] has label c, where 0 <= c < C.
    - reg: (float) regularization strength

    Returns a tuple of:
    - loss as single float
    - gradient with respect to weights W; an array of same shape as W
    """
    # pylint: disable=too-many-locals
    # Initialize the loss and gradient to zero.
    loss = 0.0
    dW = np.zeros_like(W)

    ############################################################################
    # DONE: Compute the cross-entropy loss and its gradient using explicit     #
    # loops. Store the loss in loss and the gradient in dW. If you are not     #
    # careful here, it is easy to run into numeric instability. Don't forget   #
    # the regularization!                                                      #
    ############################################################################

    n_samples = X.shape[0]
    n_classes = W.shape[1]
    y_hats = naive_matrix_mult(X, W)
    softmax_scores = np.zeros((1, n_classes)) # Store softmax scores

    # Loss & gradient calculations
    for i in range(n_samples):
        actual_class_idx = y[i]      # for the ith sample
        all_class_scores = y_hats[i] # for the ith sample

        # Use epsilon to handle numerical instability in softmax
        eps = -np.max(all_class_scores)
        
        # Calculate denominator of softmax
        denom = 0.0
        for j in range(n_classes):
            denom += np.exp(all_class_scores[j] + eps)
        
        # Calculate nominator of softmax
        for j in range(n_classes):
            nom = np.exp(all_class_scores[j] + eps)
            softmax_scores[0, j] = nom / denom
        
        loss += -np.log(softmax_scores[0, actual_class_idx])          # Cross-entropy loss for ith sample
        softmax_scores[0, actual_class_idx] -= 1                      # Subtract one from the predicted score of actual class
        dW_i = naive_matrix_mult(X[i].reshape(-1, 1), softmax_scores) # Calculate jacobian for ith sample
        naive_matrix_sum(dW, dW_i)                                    # Add contribution of current sample to the overall gradient

    loss = loss / n_samples + np.sum(W**2) * reg   # Calculate the mean of losses, add regularization term
    naive_matrix_scale(dW, 1.0/n_samples)          # Calculate the mean of jacobians
    dW += 2 * W * reg                              # Add regularization
    ############################################################################
    #                          END OF YOUR CODE                                #
    ############################################################################

    return loss, dW

def cross_entropy_loss_vectorized(W, X, y, reg):
    """
    Cross-entropy loss function, vectorized version.

    Inputs and outputs are the same as in cross_entropy_loss_naive.
    """    
    ############################################################################
    # DONE: Compute the cross-entropy loss and its gradient without explicit   #
    # loops. Store the loss in loss and the gradient in dW. If you are not     #
    # careful here, it is easy to run into numeric instability. Don't forget   #
    # the regularization!                                                      #
    ############################################################################

    n_samples = X.shape[0]
    row_idxs = np.arange(n_samples)
    y_hats = X @ W                                                      # Class scores (y_hat) generated by weighting inputs (NxC)
    eps = (-np.max(y_hats, axis=1, keepdims=True))                      # Take maximum elements of each row, put eps in a column vector form (1xN)
    nom = np.exp(y_hats + eps)                                          # Calculate nominator for softmax (note that nom includes all classes scores, not only the actual class score) (NxC)
    denom = np.sum(nom, axis=1, keepdims=True)                          # Calculate denominator for softmax (1xN)
    softmax_scores = nom / denom                                        # Calculate softmax scores for every score (NxC)
    actual_class_scores = softmax_scores[row_idxs, y]                   # Pick softmax score of actual class for every sample
    loss = -np.mean(np.log(actual_class_scores)) + np.sum(W**2) * reg   # Calculate cross entropy loss: -sum(log(softmax))/n_samples
    softmax_scores[row_idxs, y] -= 1                                    # Subtract 1 from softmax score of each correct class for gradient calculation
    dW = (X.T @ softmax_scores) / n_samples + 2 * W * reg               # Calculate mean of N-many dWs (DxC): Outer product of every row vector from X and softmax_scores

    ############################################################################
    #                          END OF YOUR CODE                                #
    ############################################################################

    return loss, dW


class SoftmaxClassifier(LinearClassifier):
    """The softmax classifier which uses the cross-entropy loss."""

    def loss(self, X_batch, y_batch, reg):
        return cross_entropy_loss_vectorized(self.W, X_batch, y_batch, reg)


def softmax_hyperparameter_tuning(X_train, y_train, X_val, y_val):
    # results is dictionary mapping tuples of the form
    # (learning_rate, regularization_strength) to tuples of the form
    # (training_accuracy, validation_accuracy). The accuracy is simply the
    # fraction of data points that are correctly classified.
    results = {}
    best_val = -1
    best_softmax = None
    all_classifiers = []

    # Softmax on raw pixels below ranges were used:
    # learning_rates = np.arange(1.0e-6, 5.5e-6, 0.5e-6)
    # regularization_strengths = np.arange(1e3, 6.5e3, 0.5e3)

    # Softmax on features below ranges were used:
    learning_rates = np.arange(1.0e-2, 2.5e-2, 0.5e-2)
    regularization_strengths = np.arange(1e-1, 5e-1, 1e-1)

    ############################################################################
    # DONE:                                                                    #
    # Write code that chooses the best hyperparameters by tuning on the        #
    # validation set. For each combination of hyperparameters, train a         #
    # classifier on the training set, compute its accuracy on the training and #
    # validation sets, and  store these numbers in the results dictionary.     #
    # In addition, store the best validation accuracy in best_val and the      #
    # Softmax object that achieves this accuracy in best_softmax.              #
    #                                                                          #
    # Hint: You should use a small value for num_iters as you develop your     #
    # validation code so that the classifiers don't take much time to train;   # 
    # once you are confident that your validation code works, you should rerun #
    # the validation code with a larger value for num_iters.                   #
    ############################################################################

    for lr in learning_rates:
        for reg in regularization_strengths:
            softmax = SoftmaxClassifier()
            softmax.train(X_train, y_train, learning_rate=lr, reg=reg,
                            num_iters=1500, verbose=False)
            y_train_pred = softmax.predict(X_train)
            train_acc = np.mean(y_train == y_train_pred)

            y_val_pred = softmax.predict(X_val)
            val_acc = np.mean(y_val == y_val_pred)
            print('lr %e' % lr)
            print('reg %e' % reg)
            print('training accuracy: %f' % train_acc)
            print('validation accuracy: %f' % val_acc)
            
            results[(lr, reg)] = (train_acc, val_acc)
            all_classifiers.append((softmax, val_acc))
            
            if val_acc > best_val:
                best_val = val_acc
                best_softmax = softmax


    ############################################################################
    #                              END OF YOUR CODE                            #
    ############################################################################
        
    # Print out results.
    for (lr, reg) in sorted(results):
        train_accuracy, val_accuracy = results[(lr, reg)]
        print('lr %e reg %e train accuracy: %f val accuracy: %f' % (
              lr, reg, train_accuracy, val_accuracy))
        
    print('best validation accuracy achieved during validation: %f' % best_val)

    return best_softmax, results, all_classifiers
